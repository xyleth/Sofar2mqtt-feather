[{"id":"9dd267c8.5847f8","type":"function","z":"874dc613.176848","name":"Format Sofar2mqtt","func":"//running_state\nvar rs;\nswitch (msg.payload.running_state)\n{\n\tcase 0:\n\t\trs = \"Standby\"\n\t\tbreak;\n\tcase 1:\n\t\trs = \"Check charge\"\n\t\tbreak;\n\tcase 2:\n\t\trs = \"Charging\"\n\t\tbreak;\n\tcase 3:\n\t\trs = \"Check discharge\"\n\t\tbreak;\n\tcase 4:\n\t\trs = \"Discharging\"\n\t\tbreak;\n\tcase 5:\n\t\trs = \"EPSState\"\n\t\tbreak;\n\tcase 6:\n\t\trs = \"Fault\"\n\t\tbreak;\n\tcase 7:\n\t\trs = \"Perminant Fault\"\n\t\tbreak;\n\tdefault:\n\t\trs = \"Unknown\"\n\t\tbreak;\n}\nmsg.payload.running_state = rs;\nglobal.set(\"sofarRunState\",rs);\n\n\n//grid_voltage V\nmsg.payload.grid_voltage = Math.round(msg.payload.grid_voltage/10);\nglobal.set(\"sofarGridVoltage\",msg.payload.grid_voltage);\n\n\n//grid_current A\ngc = Math.round(msg.payload.grid_current/10);\nmsg.payload.grid_current = gc/10;\nglobal.set(\"sofarGridCurrent\",msg.payload.grid_current);\n\n\n//grid_freq Hz\nmsg.payload.grid_freq = Math.round(msg.payload.grid_freq/100);\nglobal.set(\"sofarGridFreq\",msg.payload.grid_freq);\n\n\n//battery_power W\nbp = parseInt(msg.payload.battery_power);\nif (bp > 65535/2)\n{\n    //Discharing    \n    bp = parseInt((65535 - bp)*10);\n}\nelse\n{\n    //Charging\n    bp = parseInt(bp*10);\n    bp = 0-bp;\n}\nglobal.set(\"sofarBatteryPower\",bp);\nmsg.payload.battery_power=bp\n\n\n//battery_voltage V\nbv = Math.round(msg.payload.battery_voltage/10);\nmsg.payload.battery_voltage = bv/10;\nglobal.set(\"sofarBatteryVoltage\",msg.payload.battery_voltage);\n\n\n//battery_current A\nbc = msg.payload.battery_current;\nif (bc > 65535/2)\n{\n    //Discharing    \n    bc = parseInt((65535 - bc)/100);\n}\nelse\n{\n    bc = parseInt(bc/100);\n}\nmsg.payload.battery_current = bc;\nglobal.set(\"sofarBatteryCurrent\",msg.payload.battery_current);\n\n\n//batterySOC %\nglobal.set(\"sofarBatterySOC\",msg.payload.batterySOC);\n\n\n//battery_cycles\nglobal.set(\"sofarBatteryCycles\",msg.payload.battery_cycles);\n\n\n//grid_power W\ngp = msg.payload.grid_power;\nif (gp > 65535/2)\n{\n    //Importing    \n    gp = parseInt((65535 - gp)*10);\n}\nelse\n{\n    //Exporting\n    gp = parseInt(gp*10);\n    gp = 0-gp;\n}\nmsg.payload.grid_power = gp;\nglobal.set(\"sofarGridPower\",msg.payload.grid_power);\n\n\n//consumption W\nmsg.payload.consumption = Math.round(msg.payload.consumption*10);\nglobal.set(\"sofarConsumption\",msg.payload.consumption);\n\n\n//SolarPV W\nmsg.payload.solarPV = Math.round(msg.payload.solarPV*10);\nglobal.set(\"sofarSolarPV\",msg.payload.solarPV);\n\n\n//today_generation kWh\ntg = Math.round(msg.payload.today_generation*10);\nmsg.payload.today_generation = tg/1000;\nglobal.set(\"sofarGenerationToday\",msg.payload.today_generation);\n\n\n//today_exported kWh\nte = Math.round(msg.payload.today_exported*10);\nmsg.payload.today_exported = te/1000;\nglobal.set(\"sofarExportToday\",msg.payload.today_exported);\n\n\n//today_purchase kWh\ntp = Math.round(msg.payload.today_purchase*10);\nmsg.payload.today_purchase = tp/1000;\nglobal.set(\"sofarImportToday\",msg.payload.today_purchase);\n\n\n//today_consumption kWh\ntc = Math.round(msg.payload.today_consumption*10);\nmsg.payload.today_consumption = tc/1000;\nglobal.set(\"sofarConsumptionToday\",msg.payload.today_consumption);\n\n\n//inverter_temp C\nglobal.set(\"sofarInverterTemp\",msg.payload.inverter_temp);\n\n\n//inverterHS_temp C\nglobal.set(\"sofarHeatSinkTemp\",msg.payload.inverterHS_temp);\n\n\n//solarPVAmps A\nsa = Math.round(msg.payload.solarPVAmps/10);\nmsg.payload.solarPVAmps = sa/10;\nglobal.set(\"sofarSolarPVCurrent\",msg.payload.solarPVAmps);\n\nglobal.set(\"sofar2mqtt\",msg.payload);\n\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"\"})\nsetTimeout(() => { node.status({}); }, 3000);\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":270,"y":40,"wires":[["9cb1d52a.f634c8"]],"info":"This function sets the format of each parameter sent by the inverter and assigns each on to a global variable.\r\nTherefore, you can either pass the msg.payload object directly to the next function or pick up inverter \r\nparameters in any function using something like:\r\n\r\nUsing the complete object...\r\n\r\nvar sofar2mqtt = global.get(\"sofar2mqtt\");\r\nvar batterySoc = sofar2mqtt.batterySoc;\r\n\r\nor use individual variables...\r\n\r\nvar batterySoc = global.get(\"sofarBatterySOC\");"}]